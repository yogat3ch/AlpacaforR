% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Websockets.R
\name{AlpacaSocket}
\alias{AlpacaSocket}
\alias{PolygonSocket}
\title{AlpacaSocket}
\description{
A \link[websocket]{WebSocket} with modifications for Alpaca/Polygon websocket streams. \lifecycle{experimental}
}
\concept{AlpacaStreams}
\section{Super class}{
\code{\link[websocket:WebSocket]{websocket::WebSocket}} -> \code{AlpacaSocket}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{opts}}{Options supplied to \code{AlpacaStreams$new()} are stored here. Channel specific streams are stored in nested lists with the channel/stream name. All of these options can be altered after the websocket has been activated, with the exception of \code{write_dir}.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-AlpacaSocket-new}{\code{AlpacaSocket$new()}}
\item \href{#method-AlpacaSocket-lastmessage}{\code{AlpacaSocket$lastmessage()}}
\item \href{#method-AlpacaSocket-logs}{\code{AlpacaSocket$logs()}}
\item \href{#method-AlpacaSocket-channel}{\code{AlpacaSocket$channel()}}
\item \href{#method-AlpacaSocket-auth}{\code{AlpacaSocket$auth()}}
\item \href{#method-AlpacaSocket-clone}{\code{AlpacaSocket$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="websocket" data-topic="WebSocket" data-id="clearAccessLogChannels"><a href='../../websocket/html/WebSocket.html#method-WebSocket-clearAccessLogChannels'><code>websocket::WebSocket$clearAccessLogChannels()</code></a></span></li>
<li><span class="pkg-link" data-pkg="websocket" data-topic="WebSocket" data-id="clearErrorLogChannels"><a href='../../websocket/html/WebSocket.html#method-WebSocket-clearErrorLogChannels'><code>websocket::WebSocket$clearErrorLogChannels()</code></a></span></li>
<li><span class="pkg-link" data-pkg="websocket" data-topic="WebSocket" data-id="close"><a href='../../websocket/html/WebSocket.html#method-WebSocket-close'><code>websocket::WebSocket$close()</code></a></span></li>
<li><span class="pkg-link" data-pkg="websocket" data-topic="WebSocket" data-id="connect"><a href='../../websocket/html/WebSocket.html#method-WebSocket-connect'><code>websocket::WebSocket$connect()</code></a></span></li>
<li><span class="pkg-link" data-pkg="websocket" data-topic="WebSocket" data-id="onClose"><a href='../../websocket/html/WebSocket.html#method-WebSocket-onClose'><code>websocket::WebSocket$onClose()</code></a></span></li>
<li><span class="pkg-link" data-pkg="websocket" data-topic="WebSocket" data-id="onError"><a href='../../websocket/html/WebSocket.html#method-WebSocket-onError'><code>websocket::WebSocket$onError()</code></a></span></li>
<li><span class="pkg-link" data-pkg="websocket" data-topic="WebSocket" data-id="onMessage"><a href='../../websocket/html/WebSocket.html#method-WebSocket-onMessage'><code>websocket::WebSocket$onMessage()</code></a></span></li>
<li><span class="pkg-link" data-pkg="websocket" data-topic="WebSocket" data-id="onOpen"><a href='../../websocket/html/WebSocket.html#method-WebSocket-onOpen'><code>websocket::WebSocket$onOpen()</code></a></span></li>
<li><span class="pkg-link" data-pkg="websocket" data-topic="WebSocket" data-id="protocol"><a href='../../websocket/html/WebSocket.html#method-WebSocket-protocol'><code>websocket::WebSocket$protocol()</code></a></span></li>
<li><span class="pkg-link" data-pkg="websocket" data-topic="WebSocket" data-id="readyState"><a href='../../websocket/html/WebSocket.html#method-WebSocket-readyState'><code>websocket::WebSocket$readyState()</code></a></span></li>
<li><span class="pkg-link" data-pkg="websocket" data-topic="WebSocket" data-id="send"><a href='../../websocket/html/WebSocket.html#method-WebSocket-send'><code>websocket::WebSocket$send()</code></a></span></li>
<li><span class="pkg-link" data-pkg="websocket" data-topic="WebSocket" data-id="setAccessLogChannels"><a href='../../websocket/html/WebSocket.html#method-WebSocket-setAccessLogChannels'><code>websocket::WebSocket$setAccessLogChannels()</code></a></span></li>
<li><span class="pkg-link" data-pkg="websocket" data-topic="WebSocket" data-id="setErrorLogChannels"><a href='../../websocket/html/WebSocket.html#method-WebSocket-setErrorLogChannels'><code>websocket::WebSocket$setErrorLogChannels()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AlpacaSocket-new"></a>}}
\if{latex}{\out{\hypertarget{method-AlpacaSocket-new}{}}}
\subsection{Method \code{new()}}{
Connect to an Alpaca websocket
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AlpacaSocket$new(opts, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{opts}}{passed from  \link[AlpacaforR]{AlpacaStreams}}

\item{\code{...}}{passed on to \link[websocket]{WebSocket}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AlpacaSocket-lastmessage"></a>}}
\if{latex}{\out{\hypertarget{method-AlpacaSocket-lastmessage}{}}}
\subsection{Method \code{lastmessage()}}{
Returns the last message received by the socket
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AlpacaSocket$lastmessage()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AlpacaSocket-logs"></a>}}
\if{latex}{\out{\hypertarget{method-AlpacaSocket-logs}{}}}
\subsection{Method \code{logs()}}{
Returns the message log
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AlpacaSocket$logs(channel)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{channel}}{\code{(character)} Channel name of logs to be returned. Use \code{"status"} to get all status messages for the socket.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AlpacaSocket-channel"></a>}}
\if{latex}{\out{\hypertarget{method-AlpacaSocket-channel}{}}}
\subsection{Method \code{channel()}}{
Sends request to websocket to join the specified channel. Channel options are inherited from defaults set in \code{\link[AlpacaforR]{AlpacaStreams}$initialize} unless overridden. \strong{Notes} 1. the Polygon website is only available to Polygon subscribers. 2. The \code{sip} data stream is only available to Alpaca PRO subscribers.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AlpacaSocket$channel(
  channel = NULL,
  subscribe = TRUE,
  overwrite = FALSE,
  msg_action = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{channel}}{The channel to join.
\itemize{
\item{For Alpaca v1: \code{(character)} vector of symbols}
\item{For Alpaca Data v2: \code{(named list)} Items with names \code{trades}, \code{quotes}, \code{bars} are accepted. See the \href{Alpaca v2 Data Streaming websocket docs}{https://alpaca.markets/docs/api-documentation/api-v2/market-data/alpaca-data-api-v2/real-time#subscribe} for details.}
\item{For Polygon: \code{(character)} vector of channels formatted according to the \href{https://polygon.io/docs/websockets/subscribe}{websocket documentation}.}
}}

\item{\code{subscribe}}{\code{(logical)} \strong{Default \code{TRUE}}. Set to \code{FALSE} to unsubscribe from specified channel(s).}

\item{\code{overwrite}}{\code{(logical)} \strong{Default} \code{FALSE}. Set to \code{TRUE} to overwrite data from previous instances of this channel socket.}

\item{\code{msg_action}}{\code{(expression)} An expression that performs a user-specified action on the receipt of websocket message. These act on the \code{msg} object seen printed to the console when a message is received (if \code{toConsole = TRUE}). The \code{msg} object also contains a \verb{$ts} column with the timestamp as a \code{POSIXct} and a \verb{$socket} column with the socket name of origin (\code{"Alpaca"/"Polygon"}) that are not visible in what is printed to the console but accessible to \code{msg_action}. The expression can also reference the \code{self} internal environment of this \code{\link[R6]{R6Class}}.}

\item{\code{...}}{Named arguments from \code{AlpacaStreams$new()}}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
If \code{log = TRUE} for a Polygon channel, all non-status messages will be stored as tibbles named according to their respective channel name and accessed via the \verb{$logs()} method.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AlpacaSocket-auth"></a>}}
\if{latex}{\out{\hypertarget{method-AlpacaSocket-auth}{}}}
\subsection{Method \code{auth()}}{
Authorize the stream (this is done automatically when initializing via the \code{AlpacaStreams} class.)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AlpacaSocket$auth()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AlpacaSocket-clone"></a>}}
\if{latex}{\out{\hypertarget{method-AlpacaSocket-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AlpacaSocket$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
\section{Super classes}{
\code{\link[websocket:WebSocket]{websocket::WebSocket}} -> \code{\link[AlpacaforR:AlpacaSocket]{AlpacaforR::AlpacaSocket}} -> \code{PolygonSocket}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PolygonSocket-clone}{\code{PolygonSocket$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="websocket" data-topic="WebSocket" data-id="clearAccessLogChannels"><a href='../../websocket/html/WebSocket.html#method-WebSocket-clearAccessLogChannels'><code>websocket::WebSocket$clearAccessLogChannels()</code></a></span></li>
<li><span class="pkg-link" data-pkg="websocket" data-topic="WebSocket" data-id="clearErrorLogChannels"><a href='../../websocket/html/WebSocket.html#method-WebSocket-clearErrorLogChannels'><code>websocket::WebSocket$clearErrorLogChannels()</code></a></span></li>
<li><span class="pkg-link" data-pkg="websocket" data-topic="WebSocket" data-id="close"><a href='../../websocket/html/WebSocket.html#method-WebSocket-close'><code>websocket::WebSocket$close()</code></a></span></li>
<li><span class="pkg-link" data-pkg="websocket" data-topic="WebSocket" data-id="connect"><a href='../../websocket/html/WebSocket.html#method-WebSocket-connect'><code>websocket::WebSocket$connect()</code></a></span></li>
<li><span class="pkg-link" data-pkg="websocket" data-topic="WebSocket" data-id="onClose"><a href='../../websocket/html/WebSocket.html#method-WebSocket-onClose'><code>websocket::WebSocket$onClose()</code></a></span></li>
<li><span class="pkg-link" data-pkg="websocket" data-topic="WebSocket" data-id="onError"><a href='../../websocket/html/WebSocket.html#method-WebSocket-onError'><code>websocket::WebSocket$onError()</code></a></span></li>
<li><span class="pkg-link" data-pkg="websocket" data-topic="WebSocket" data-id="onMessage"><a href='../../websocket/html/WebSocket.html#method-WebSocket-onMessage'><code>websocket::WebSocket$onMessage()</code></a></span></li>
<li><span class="pkg-link" data-pkg="websocket" data-topic="WebSocket" data-id="onOpen"><a href='../../websocket/html/WebSocket.html#method-WebSocket-onOpen'><code>websocket::WebSocket$onOpen()</code></a></span></li>
<li><span class="pkg-link" data-pkg="websocket" data-topic="WebSocket" data-id="protocol"><a href='../../websocket/html/WebSocket.html#method-WebSocket-protocol'><code>websocket::WebSocket$protocol()</code></a></span></li>
<li><span class="pkg-link" data-pkg="websocket" data-topic="WebSocket" data-id="readyState"><a href='../../websocket/html/WebSocket.html#method-WebSocket-readyState'><code>websocket::WebSocket$readyState()</code></a></span></li>
<li><span class="pkg-link" data-pkg="websocket" data-topic="WebSocket" data-id="send"><a href='../../websocket/html/WebSocket.html#method-WebSocket-send'><code>websocket::WebSocket$send()</code></a></span></li>
<li><span class="pkg-link" data-pkg="websocket" data-topic="WebSocket" data-id="setAccessLogChannels"><a href='../../websocket/html/WebSocket.html#method-WebSocket-setAccessLogChannels'><code>websocket::WebSocket$setAccessLogChannels()</code></a></span></li>
<li><span class="pkg-link" data-pkg="websocket" data-topic="WebSocket" data-id="setErrorLogChannels"><a href='../../websocket/html/WebSocket.html#method-WebSocket-setErrorLogChannels'><code>websocket::WebSocket$setErrorLogChannels()</code></a></span></li>
<li><span class="pkg-link" data-pkg="AlpacaforR" data-topic="AlpacaSocket" data-id="auth"><a href='../../AlpacaforR/html/AlpacaSocket.html#method-AlpacaSocket-auth'><code>AlpacaforR::AlpacaSocket$auth()</code></a></span></li>
<li><span class="pkg-link" data-pkg="AlpacaforR" data-topic="AlpacaSocket" data-id="channel"><a href='../../AlpacaforR/html/AlpacaSocket.html#method-AlpacaSocket-channel'><code>AlpacaforR::AlpacaSocket$channel()</code></a></span></li>
<li><span class="pkg-link" data-pkg="AlpacaforR" data-topic="AlpacaSocket" data-id="initialize"><a href='../../AlpacaforR/html/AlpacaSocket.html#method-AlpacaSocket-initialize'><code>AlpacaforR::AlpacaSocket$initialize()</code></a></span></li>
<li><span class="pkg-link" data-pkg="AlpacaforR" data-topic="AlpacaSocket" data-id="lastmessage"><a href='../../AlpacaforR/html/AlpacaSocket.html#method-AlpacaSocket-lastmessage'><code>AlpacaforR::AlpacaSocket$lastmessage()</code></a></span></li>
<li><span class="pkg-link" data-pkg="AlpacaforR" data-topic="AlpacaSocket" data-id="logs"><a href='../../AlpacaforR/html/AlpacaSocket.html#method-AlpacaSocket-logs'><code>AlpacaforR::AlpacaSocket$logs()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PolygonSocket-clone"></a>}}
\if{latex}{\out{\hypertarget{method-PolygonSocket-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PolygonSocket$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
